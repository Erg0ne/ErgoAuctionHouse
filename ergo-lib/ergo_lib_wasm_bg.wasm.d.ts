/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_ergoboxcandidate_free(a: number): void;
export function __wbg_ergobox_free(a: number): void;
export function ergobox_new(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_boxvalue_free(a: number): void;
export function boxvalue_SAFE_USER_MIN(): number;
export function boxvalue_from_u32(a: number): number;
export function __wbg_secretkey_free(a: number): void;
export function secretkey_random_dlog(): number;
export function secretkey_dlog_from_bytes(a: number, b: number): number;
export function secretkey_get_address(a: number): number;
export function __wbg_ergoboxcandidatebuilder_free(a: number): void;
export function ergoboxcandidatebuilder_new(a: number, b: number, c: number): number;
export function ergoboxcandidatebuilder_set_min_box_value_per_byte(a: number, b: number): void;
export function ergoboxcandidatebuilder_min_box_value_per_byte(a: number): number;
export function ergoboxcandidatebuilder_set_value(a: number, b: number): void;
export function ergoboxcandidatebuilder_value(a: number): number;
export function ergoboxcandidatebuilder_calc_box_size_bytes(a: number): number;
export function ergoboxcandidatebuilder_calc_min_box_value(a: number): number;
export function ergoboxcandidatebuilder_build(a: number): number;
export function __wbg_ergoboxes_free(a: number): void;
export function ergoboxes_from_boxes_json(a: number, b: number): number;
export function ergoboxes_new(a: number): number;
export function ergoboxes_add(a: number, b: number): void;
export function __wbg_ergoboxcandidates_free(a: number): void;
export function ergoboxcandidates_new(a: number): number;
export function __wbg_i64_free(a: number): void;
export function i64_from_str(a: number, b: number): number;
export function i64_to_str(a: number, b: number): void;
export function __wbg_txid_free(a: number): void;
export function txid_zero(): number;
export function __wbg_transaction_free(a: number): void;
export function transaction_to_json(a: number): number;
export function __wbg_unsignedtransaction_free(a: number): void;
export function __wbg_address_free(a: number): void;
export function address_from_testnet_str(a: number, b: number): number;
export function __wbg_contract_free(a: number): void;
export function contract_pay_to_address(a: number): number;
export function __wbg_constant_free(a: number): void;
export function constant_decode_from_base16(a: number, b: number): number;
export function constant_encode_to_base16(a: number, b: number): void;
export function constant_from_i32(a: number): number;
export function constant_as_i32(a: number): number;
export function constant_from_i64(a: number): number;
export function constant_as_i64(a: number): number;
export function constant_from_byte_array(a: number, b: number): number;
export function constant_as_byte_array(a: number): number;
export function __wbg_wallet_free(a: number): void;
export function wallet_from_mnemonic(a: number, b: number, c: number, d: number): number;
export function wallet_from_secret(a: number): number;
export function wallet_sign_transaction(a: number, b: number, c: number, d: number, e: number): number;
export function ergostatecontext_dummy(): number;
export function __wbg_txbuilder_free(a: number): void;
export function txbuilder_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function txbuilder_build(a: number): number;
export function __wbg_ergostatecontext_free(a: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
